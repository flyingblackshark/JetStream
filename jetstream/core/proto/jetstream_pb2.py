# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: jetstream/core/proto/jetstream.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(
    b'\n$jetstream/core/proto/jetstream.proto\x12\x0fjetstream_proto"\x8e\x02\n\rDecodeRequest\x12\x12\n\nmax_tokens\x18\x04 \x01(\x05\x12\x42\n\rtoken_content\x18\x06 \x01(\x0b\x32+.jetstream_proto.DecodeRequest.TokenContent\x12;\n\x08metadata\x18\x07 \x01(\x0b\x32\'.jetstream_proto.DecodeRequest.MetadataH\x00\x1a!\n\x0cTokenContent\x12\x11\n\ttoken_ids\x18\x01 \x03(\x05\x1a\x1e\n\x08Metadata\x12\x12\n\nstart_time\x18\x01 \x01(\x02\x42\x13\n\x11metadata_optionalJ\x04\x08\x01\x10\x02J\x04\x08\x02\x10\x03J\x04\x08\x03\x10\x04"\xb5\x03\n\x0e\x44\x65\x63odeResponse\x12I\n\x0finitial_content\x18\x02 \x01(\x0b\x32..jetstream_proto.DecodeResponse.InitialContentH\x00\x12G\n\x0estream_content\x18\x03 \x01(\x0b\x32-.jetstream_proto.DecodeResponse.StreamContentH\x00\x1a\x10\n\x0eInitialContent\x1a\xeb\x01\n\rStreamContent\x12\x45\n\x07samples\x18\x01 \x03(\x0b\x32\x34.jetstream_proto.DecodeResponse.StreamContent.Sample\x1a\x92\x01\n\x06Sample\x12\x0c\n\x04text\x18\x01 \x01(\t\x12T\n\ttoken_ids\x18\x02 \x03(\x0b\x32\x41.jetstream_proto.DecodeResponse.StreamContent.Sample.SemanticCode\x1a$\n\x0cSemanticCode\x12\x14\n\x0csemantic_ids\x18\x01 \x03(\x05\x42\t\n\x07\x63ontentJ\x04\x08\x01\x10\x02"\x14\n\x12HealthCheckRequest"&\n\x13HealthCheckResponse\x12\x0f\n\x07is_live\x18\x01 \x01(\x08\x32\xb9\x01\n\x0cOrchestrator\x12M\n\x06\x44\x65\x63ode\x12\x1e.jetstream_proto.DecodeRequest\x1a\x1f.jetstream_proto.DecodeResponse"\x00\x30\x01\x12Z\n\x0bHealthCheck\x12#.jetstream_proto.HealthCheckRequest\x1a$.jetstream_proto.HealthCheckResponse"\x00\x62\x06proto3'
)


_DECODEREQUEST = DESCRIPTOR.message_types_by_name["DecodeRequest"]
_DECODEREQUEST_TOKENCONTENT = _DECODEREQUEST.nested_types_by_name[
    "TokenContent"
]
_DECODEREQUEST_METADATA = _DECODEREQUEST.nested_types_by_name["Metadata"]
_DECODERESPONSE = DESCRIPTOR.message_types_by_name["DecodeResponse"]
_DECODERESPONSE_INITIALCONTENT = _DECODERESPONSE.nested_types_by_name[
    "InitialContent"
]
_DECODERESPONSE_STREAMCONTENT = _DECODERESPONSE.nested_types_by_name[
    "StreamContent"
]
_DECODERESPONSE_STREAMCONTENT_SAMPLE = (
    _DECODERESPONSE_STREAMCONTENT.nested_types_by_name["Sample"]
)
_DECODERESPONSE_STREAMCONTENT_SAMPLE_SEMANTICCODE = (
    _DECODERESPONSE_STREAMCONTENT_SAMPLE.nested_types_by_name["SemanticCode"]
)
_HEALTHCHECKREQUEST = DESCRIPTOR.message_types_by_name["HealthCheckRequest"]
_HEALTHCHECKRESPONSE = DESCRIPTOR.message_types_by_name["HealthCheckResponse"]
DecodeRequest = _reflection.GeneratedProtocolMessageType(
    "DecodeRequest",
    (_message.Message,),
    {
        "TokenContent": _reflection.GeneratedProtocolMessageType(
            "TokenContent",
            (_message.Message,),
            {
                "DESCRIPTOR": _DECODEREQUEST_TOKENCONTENT,
                "__module__": "jetstream.core.proto.jetstream_pb2",
                # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeRequest.TokenContent)
            },
        ),
        "Metadata": _reflection.GeneratedProtocolMessageType(
            "Metadata",
            (_message.Message,),
            {
                "DESCRIPTOR": _DECODEREQUEST_METADATA,
                "__module__": "jetstream.core.proto.jetstream_pb2",
                # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeRequest.Metadata)
            },
        ),
        "DESCRIPTOR": _DECODEREQUEST,
        "__module__": "jetstream.core.proto.jetstream_pb2",
        # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeRequest)
    },
)
_sym_db.RegisterMessage(DecodeRequest)
_sym_db.RegisterMessage(DecodeRequest.TokenContent)
_sym_db.RegisterMessage(DecodeRequest.Metadata)

DecodeResponse = _reflection.GeneratedProtocolMessageType(
    "DecodeResponse",
    (_message.Message,),
    {
        "InitialContent": _reflection.GeneratedProtocolMessageType(
            "InitialContent",
            (_message.Message,),
            {
                "DESCRIPTOR": _DECODERESPONSE_INITIALCONTENT,
                "__module__": "jetstream.core.proto.jetstream_pb2",
                # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeResponse.InitialContent)
            },
        ),
        "StreamContent": _reflection.GeneratedProtocolMessageType(
            "StreamContent",
            (_message.Message,),
            {
                "Sample": _reflection.GeneratedProtocolMessageType(
                    "Sample",
                    (_message.Message,),
                    {
                        "SemanticCode": _reflection.GeneratedProtocolMessageType(
                            "SemanticCode",
                            (_message.Message,),
                            {
                                "DESCRIPTOR": _DECODERESPONSE_STREAMCONTENT_SAMPLE_SEMANTICCODE,
                                "__module__": "jetstream.core.proto.jetstream_pb2",
                                # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeResponse.StreamContent.Sample.SemanticCode)
                            },
                        ),
                        "DESCRIPTOR": _DECODERESPONSE_STREAMCONTENT_SAMPLE,
                        "__module__": "jetstream.core.proto.jetstream_pb2",
                        # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeResponse.StreamContent.Sample)
                    },
                ),
                "DESCRIPTOR": _DECODERESPONSE_STREAMCONTENT,
                "__module__": "jetstream.core.proto.jetstream_pb2",
                # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeResponse.StreamContent)
            },
        ),
        "DESCRIPTOR": _DECODERESPONSE,
        "__module__": "jetstream.core.proto.jetstream_pb2",
        # @@protoc_insertion_point(class_scope:jetstream_proto.DecodeResponse)
    },
)
_sym_db.RegisterMessage(DecodeResponse)
_sym_db.RegisterMessage(DecodeResponse.InitialContent)
_sym_db.RegisterMessage(DecodeResponse.StreamContent)
_sym_db.RegisterMessage(DecodeResponse.StreamContent.Sample)
_sym_db.RegisterMessage(DecodeResponse.StreamContent.Sample.SemanticCode)

HealthCheckRequest = _reflection.GeneratedProtocolMessageType(
    "HealthCheckRequest",
    (_message.Message,),
    {
        "DESCRIPTOR": _HEALTHCHECKREQUEST,
        "__module__": "jetstream.core.proto.jetstream_pb2",
        # @@protoc_insertion_point(class_scope:jetstream_proto.HealthCheckRequest)
    },
)
_sym_db.RegisterMessage(HealthCheckRequest)

HealthCheckResponse = _reflection.GeneratedProtocolMessageType(
    "HealthCheckResponse",
    (_message.Message,),
    {
        "DESCRIPTOR": _HEALTHCHECKRESPONSE,
        "__module__": "jetstream.core.proto.jetstream_pb2",
        # @@protoc_insertion_point(class_scope:jetstream_proto.HealthCheckResponse)
    },
)
_sym_db.RegisterMessage(HealthCheckResponse)

_ORCHESTRATOR = DESCRIPTOR.services_by_name["Orchestrator"]
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _DECODEREQUEST._serialized_start = 58
  _DECODEREQUEST._serialized_end = 328
  _DECODEREQUEST_TOKENCONTENT._serialized_start = 224
  _DECODEREQUEST_TOKENCONTENT._serialized_end = 257
  _DECODEREQUEST_METADATA._serialized_start = 259
  _DECODEREQUEST_METADATA._serialized_end = 289
  _DECODERESPONSE._serialized_start = 331
  _DECODERESPONSE._serialized_end = 768
  _DECODERESPONSE_INITIALCONTENT._serialized_start = 497
  _DECODERESPONSE_INITIALCONTENT._serialized_end = 513
  _DECODERESPONSE_STREAMCONTENT._serialized_start = 516
  _DECODERESPONSE_STREAMCONTENT._serialized_end = 751
  _DECODERESPONSE_STREAMCONTENT_SAMPLE._serialized_start = 605
  _DECODERESPONSE_STREAMCONTENT_SAMPLE._serialized_end = 751
  _DECODERESPONSE_STREAMCONTENT_SAMPLE_SEMANTICCODE._serialized_start = 715
  _DECODERESPONSE_STREAMCONTENT_SAMPLE_SEMANTICCODE._serialized_end = 751
  _HEALTHCHECKREQUEST._serialized_start = 770
  _HEALTHCHECKREQUEST._serialized_end = 790
  _HEALTHCHECKRESPONSE._serialized_start = 792
  _HEALTHCHECKRESPONSE._serialized_end = 830
  _ORCHESTRATOR._serialized_start = 833
  _ORCHESTRATOR._serialized_end = 1018
# @@protoc_insertion_point(module_scope)
